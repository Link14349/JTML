{"version":3,"sources":["../src/index.js"],"names":["JTML","global","globalThis","DOMAIN","$","compileNow","compiler","each","tag","cb","tags","children","i","length","$compiler","fun","name","hide","recursion","set","tokenName","value","gotName","gotValue","tokens","split","tmp","localName","text","t","eval","show","v","e","console","error","Error","compile","domain","tagJq","css","document","ready","jtml"],"mappings":";;AAAA;;;;;;;;;;AAUA,IAAMA,OAAO,EAAb;AACA,IAAMC,SAASC,UAAf;;AAEA,CAAC,UAAUF,IAAV,EAAgB;AACbA,SAAKG,MAAL,GAAcC,EAAE,IAAF,CAAd;AACAJ,SAAKK,UAAL,GAAkB,IAAlB;AACAL,SAAKM,QAAL,GAAgB,EAAhB;;AAEAN,SAAKO,IAAL,GAAY,UAAUC,GAAV,EAAeC,EAAf,EAAmB;AAC3B,YAAIC,OAAOF,IAAIG,QAAJ,EAAX;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,KAAKG,MAAzB,EAAiCD,GAAjC,EAAsC;AAClC,gBAAI,CAACH,GAAGC,KAAKE,CAAL,CAAH,CAAL,EAAkBZ,KAAKO,IAAL,CAAUH,EAAEM,KAAKE,CAAL,CAAF,CAAV,EAAsBH,EAAtB;AACrB;AACJ,KALD;;AAOAT,SAAKM,QAAL,CAAcQ,SAAd,GAA0B,UAAUC,GAAV,EAA+D;AAAA,YAAhDC,IAAgD,uEAAzCD,IAAIC,IAAqC;AAAA,YAA/BC,IAA+B,uEAAxB,IAAwB;AAAA,YAAlBC,SAAkB,uEAAN,IAAM;;AACrFlB,aAAKM,QAAL,CAAcU,IAAd,IAAsBD,GAAtB;AACAf,aAAKM,QAAL,CAAcU,IAAd,EAAoBC,IAApB,GAA2BA,IAA3B;AACAjB,aAAKM,QAAL,CAAcU,IAAd,EAAoBE,SAApB,GAAgCA,SAAhC;AACH,KAJD;AAKAlB,SAAKM,QAAL,CAAcQ,SAAd,CAAwB,SAASK,GAAT,CAAaX,GAAb,EAAkB;AACtC,YAAIE,OAAOF,IAAIG,QAAJ,EAAX;AACA,YAAIS,YAAY,EAAhB;AAAA,YAAoBC,QAAQ,IAA5B;AACA,YAAIC,UAAU,KAAd;AAAA,YAAqBC,WAAW,KAAhC;AACA,YAAIX,UAAJ;AACA,iBAASO,GAAT,GAAe;AACX,gBAAIK,SAASJ,UAAUK,KAAV,CAAgB,GAAhB,CAAb;AACA,gBAAIC,MAAMzB,MAAV;AACA,iBAAK,IAAIW,KAAI,CAAb,EAAgBA,KAAIY,OAAOX,MAAP,GAAgB,CAApC,EAAuCD,IAAvC,EAA4C;AACxCc,sBAAMA,IAAIF,OAAOZ,EAAP,CAAJ,CAAN;AACH;AACDc,gBAAIF,OAAOA,OAAOX,MAAP,GAAgB,CAAvB,CAAJ,IAAiCQ,KAAjC;AACAE,uBAAW,KAAX;AACAD,sBAAU,KAAV;AACH;AACD,aAAKV,IAAI,CAAT,EAAYA,IAAIF,KAAKG,MAArB,EAA6BD,GAA7B,EAAkC;AAC9B,gBAAIF,KAAKE,CAAL,EAAQe,SAAR,IAAqB,OAAzB,EAAkC;AAC9BP,4BAAYhB,EAAEM,KAAKE,CAAL,CAAF,EAAWgB,IAAX,EAAZ;AACAN,0BAAU,IAAV;AACA,oBAAIC,QAAJ,EAAc;AACVJ;AACH;AACJ;AACD,gBAAIT,KAAKE,CAAL,EAAQe,SAAR,IAAqB,OAAzB,EAAkC;AAC9B,oBAAIE,IAAIzB,EAAEM,KAAKE,CAAL,CAAF,EAAWgB,IAAX,EAAR;AACAP,wBAAQS,KAAKD,CAAL,CAAR;AACAN,2BAAW,IAAX;AACA,oBAAID,OAAJ,EAAa;AACTH;AACH;AACJ;AACJ;AACD,eAAOE,KAAP;AACH,KAjCD,EAiCG,KAjCH,EAiCU,IAjCV,EAiCgB,KAjChB;AAkCArB,SAAKM,QAAL,CAAcQ,SAAd,CAAwB,SAASiB,IAAT,CAAcvB,GAAd,EAAmB;AACvC,YAAIwB,UAAJ;AACA,YAAI;AACA,gBAAIH,IAAIrB,IAAIoB,IAAJ,EAAR;AACAI,gBAAIF,KAAKD,CAAL,CAAJ;AACH,SAHD,CAGE,OAAOI,CAAP,EAAU;AACRC,oBAAQC,KAAR,CAAc,IAAIC,KAAJ,CAAU,uBAAV,CAAd;AACAF,oBAAQC,KAAR,CAAcF,CAAd;AACA,mBAAO,IAAP;AACH;AACDzB,YAAIoB,IAAJ,CAASI,CAAT;AACA,eAAOA,CAAP;AACH,KAZD,EAYG,MAZH,EAYW,KAZX,EAYkB,KAZlB;;AAcAhC,SAAKqC,OAAL,GAAe,YAAgC;AAAA,YAAtBC,MAAsB,uEAAbtC,KAAKG,MAAQ;;AAC3CH,aAAKO,IAAL,CAAU+B,MAAV,EAAkB,UAAU9B,GAAV,EAAe;AAC7B,gBAAIF,WAAWN,KAAKM,QAAL,CAAcE,IAAImB,SAAlB,CAAf;AACA,gBAAIrB,QAAJ,EAAc;AAAC;AACX,oBAAIiC,QAAQnC,EAAEI,GAAF,CAAZ;AACA,oBAAIF,SAASW,IAAb,EAAmBsB,MAAMC,GAAN,CAAU,SAAV,EAAqB,MAArB;AACnBlC,yBAASiC,KAAT;AACA,uBAAOjC,SAASY,SAAhB;AACH;AACJ,SARD;AASH,KAVD;AAWH,CA5EA,CA4EClB,IA5ED,CAAD;;AA8EAI,EAAEqC,QAAF,EAAYC,KAAZ,CAAkB,YAAY;AAC1B1C,SAAKG,MAAL,GAAcC,EAAE,YAAF,CAAd;;AAEA,QAAIJ,KAAKK,UAAT,EAAqBL,KAAKqC,OAAL,GAHK,CAGU;;AAEpC;AACA,QAAIM,OAAOvC,EAAE,MAAF,CAAX;AACA,SAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAI+B,KAAK9B,MAAzB,EAAiCD,GAAjC,EAAsC;AAClCZ,aAAKqC,OAAL,CAAajC,EAAEuC,KAAK/B,CAAL,CAAF,CAAb;AACH;AACJ,CAVD","file":"index.js","sourcesContent":["/*!\n\n * JTML Library\n\n * yhzheng - v0.0.1\n\n * https://github.com/qianduanXIAOHAOZI/JTML | Released under MIT license\n\n */\n\nconst JTML = {};\nconst global = globalThis;\n\n!function (JTML) {\n    JTML.DOMAIN = $(null);\n    JTML.compileNow = true;\n    JTML.compiler = {};\n\n    JTML.each = function (tag, cb) {\n        let tags = tag.children();\n        for (let i = 0; i < tags.length; i++) {\n            if (!cb(tags[i])) JTML.each($(tags[i]), cb);\n        }\n    };\n\n    JTML.compiler.$compiler = function (fun, name = fun.name, hide = true, recursion = true) {\n        JTML.compiler[name] = fun;\n        JTML.compiler[name].hide = hide;\n        JTML.compiler[name].recursion = recursion;\n    };\n    JTML.compiler.$compiler(function set(tag) {\n        let tags = tag.children();\n        let tokenName = \"\", value = null;\n        let gotName = false, gotValue = false;\n        let i;\n        function set() {\n            let tokens = tokenName.split(\".\");\n            let tmp = global;\n            for (let i = 0; i < tokens.length - 1; i++) {\n                tmp = tmp[tokens[i]];\n            }\n            tmp[tokens[tokens.length - 1]] = value;\n            gotValue = false;\n            gotName = false;\n        }\n        for (i = 0; i < tags.length; i++) {\n            if (tags[i].localName == \"token\") {\n                tokenName = $(tags[i]).text();\n                gotName = true;\n                if (gotValue) {\n                    set();\n                }\n            }\n            if (tags[i].localName == \"value\") {\n                let t = $(tags[i]).text();\n                value = eval(t);\n                gotValue = true;\n                if (gotName) {\n                    set();\n                }\n            }\n        }\n        return value;\n    }, \"set\", true, false);\n    JTML.compiler.$compiler(function show(tag) {\n        let v;\n        try {\n            let t = tag.text();\n            v = eval(t);\n        } catch (e) {\n            console.error(new Error(\"Show expression error\"));\n            console.error(e);\n            return null;\n        }\n        tag.text(v);\n        return v;\n    }, \"show\", false, false);\n\n    JTML.compile = function (domain = JTML.DOMAIN) {\n        JTML.each(domain, function (tag) {\n            let compiler = JTML.compiler[tag.localName];\n            if (compiler) {// 存在这个jtml转义器\n                let tagJq = $(tag);\n                if (compiler.hide) tagJq.css(\"display\", \"none\");\n                compiler(tagJq);\n                return compiler.recursion;\n            }\n        });\n    };\n}(JTML);\n\n$(document).ready(function () {\n    JTML.DOMAIN = $(\"body:first\");\n\n    if (JTML.compileNow) JTML.compile();// 编译domain内容\n\n    // 编译所有jtml标签包裹的内容\n    let jtml = $(\"jtml\");\n    for (let i = 0; i < jtml.length; i++) {\n        JTML.compile($(jtml[i]));\n    }\n});"]}